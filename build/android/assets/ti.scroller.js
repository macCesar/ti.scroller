function main(){var _Mathround=




Math.round;const scroller=this,platformWidth=Ti.Platform.displayCaps.platformWidth,logicalDensityFactor=Ti.Platform.displayCaps.logicalDensityFactor,deviceWidth=!1?platformWidth:_Mathround(platformWidth/logicalDensityFactor);let

messages,
duration,
_stop=!1,
currentMessage=-1,

animation=Ti.UI.createAnimation({
curve:Ti.UI.ANIMATION_CURVE_LINEAR});

animation.addEventListener("complete",function(){
_stop||
scroller.animate();

});let

scrollerView=Ti.UI.createView({
width:Ti.UI.FILL,
height:Ti.UI.SIZE}),


scrollerLabel=Ti.UI.createLabel({
top:4,
bottom:4,
right:deviceWidth,
height:Ti.UI.SIZE});


scrollerView.add(scrollerLabel),

scroller.view=function(){
return scrollerView;
},

scroller.init=function(_args){
duration=_args.duration??30,
messages=Array.isArray(_args.messages)?_args.messages:[_args.messages],

scrollerView.applyProperties({
top:_args.top??void 0,
backgroundColor:_args.backgroundColor??"#80000000"}),


scrollerLabel.applyProperties({
color:_args.color??"#fff",
font:{fontSize:_args.fontSize??14,fontWeight:_args.fontWeight??"normal"}});

},

scroller.updateMessage=function(_messages){
currentMessage=-1,
messages=Array.isArray(_messages)?_messages:[_messages];
},

scroller.updateBackground=function(_backgroundColor){
scrollerView.applyProperties({
backgroundColor:_backgroundColor??"#80000000"});

},

scroller.animate=function(){
currentMessage<messages.length-1?currentMessage++:currentMessage=0;let


_label=Ti.UI.createLabel({
top:4,
bottom:4,
height:Ti.UI.SIZE,
text:messages[currentMessage],
font:{fontSize:scrollerLabel.font.fontSize??14,fontWeight:scrollerLabel.font.fontWeight??"normal"}}),


width=_Mathround(1+_label.toImage().width/logicalDensityFactor);

scrollerLabel.applyProperties({
width:width,
left:deviceWidth,
text:messages[currentMessage]}),


animation.applyProperties({
left:-parseInt(width),
duration:width*duration}),


scrollerLabel.animate(animation);
},

scroller.resume=function(){
_stop&&(
_stop=!1,
scroller.animate());

},

scroller.stop=function(){
_stop=!0;
};
}
module.exports=main;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
