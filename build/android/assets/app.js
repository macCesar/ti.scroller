(function(){
'use strict';












function Emitter(obj){
if(obj)
return mixin(obj);

}








function mixin(obj){
for(const key in Emitter.prototype)
obj[key]=Emitter.prototype[key];

return obj;
}


























































































































function Process(){return(
this instanceof Process?void(


this.title="titanium",
this.version="",
this.moduleLoadList=[],
this.versions={},
this.arch=Ti.Platform.architecture,
this.platform="android",
this.hardware=(""+Ti.Platform.model).replace("google_")):new Process);
}









function Socket(opts){return(
this instanceof Socket?void(


opts=opts||{},
this.timeout=5e3,
this.host=opts.host,
this.port=opts.port,
this.retry=opts.retry,
this.bytesRead=0,
this.bytesWritten=0,
this.ignore=[]):new Socket(opts));
}











































































































































function Module(id){
this.filename=id+".js",
this.id=id,

this.platform="ipad"===process.platform?"iphone":
"windowsphone"===process.platform||"windowsstore"===process.platform?
"windows":

process.platform,

this.exports={},
this.loaded=!1;
}

function L(name,filler){
return(Module._globalCtx.localeStrings[Ti.Locale.currentLanguage]||{})[name]||filler||name;
}Emitter.prototype.on=function(event,fn){return this._callbacks=this._callbacks||{},(this._callbacks[event]=this._callbacks[event]||[]).push(fn),this},Emitter.prototype.once=function(event,fn){function on(){self.off(event,on),fn.apply(this,arguments)}const self=this;return this._callbacks=this._callbacks||{},fn._off=on,this.on(event,on),this},Emitter.prototype.off=function(event,fn){this._callbacks=this._callbacks||{};let callbacks=this._callbacks[event];if(!callbacks)return this;if(1===arguments.length)return delete this._callbacks[event],this;const i=callbacks.indexOf(fn._off||fn);return~i&&callbacks.splice(i,1),this},Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};const args=[].slice.call(arguments,1);let callbacks=this._callbacks[event];if(callbacks){callbacks=callbacks.slice(0);for(let i=0,len=callbacks.length;i<len;++i)callbacks[i].apply(this,args)}return this},Emitter.prototype.listeners=function(event){return this._callbacks=this._callbacks||{},this._callbacks[event]||[]},Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length},Object.setPrototypeOf(Process.prototype,Emitter.prototype),Object.setPrototypeOf(Socket.prototype,Emitter.prototype),Socket.prototype.connect=function(opts,fn){opts=opts||{},"function"==typeof opts&&(fn=opts,opts={});const self=this;self.host=opts.host||self.host||"127.0.0.1",self.port=opts.port||self.port,self.retry=opts.retry||self.retry;const reConnect=!!opts.reConnect;this._proxy=Ti.Network.Socket.createTCP({host:self.host,port:self.port,connected:function(e){self.connected=!0,self._connection=e.socket,fn&&fn(e),self.emit(reConnect?"reconnect":"connect",e),Ti.Stream.pump(e.socket,function(e){return 0>e.bytesProcessed||!!e.errorStatus?(self._proxy.close(),void self.close(!0)):void self.emit("data",""+e.buffer)},1024,!0)},error:function(e){return~self.ignore.indexOf(e.code)?void self.emit("error ignored",e):self.emit("error",e)}}),this._proxy.connect()},Socket.prototype.close=function(serverEnded){const self=this;if(self.connected=!1,self.closing=!serverEnded,self.closing)return void self.write(function(){self._proxy.close(),self.emit("close")});const retry=~~self.retry;self.emit("end"),retry&&setTimeout(function(){self.emit("reconnecting"),self.connect({reConnect:!0})},retry)},Socket.prototype.write=function(data,fn){"function"==typeof data&&(fn=data,data=null),data=data?""+data:"";const msg=Ti.createBuffer({value:data}),callback=fn||function(){};Ti.Stream.write(this._connection,msg,function(){callback([].slice(arguments))})},Socket.prototype.setKeepAlive=function(enable,initialDelay){const self=this;return enable?void(self._keepAlive=setInterval(function(){self.write("ping")},initialDelay||3e5)):(self._keepAlive&&clearInterval(self._keepAlive),void(self._keepAlive=null))};const


global$1=Module._global=Module.global={},


process=global$1.process=new Process;
process.on("uncaughtException",function(err){
console.log("[LiveView] Error Evaluating",err.module,"@ Line:",err.error.line),

console.error(""+err.error),
console.error("File:",err.module),
console.error("Line:",err.error.line),
console.error("SourceId:",err.error.sourceId),
console.error("Backtrace:\n",(""+err.error.backtrace).replace(/'\n'/g,"\n"));
}),


global$1.ENV="liveview",


global$1.logging=!1,


global$1.CATCH_ERRORS=!0,


Module._cache={},






Module._requireNative=function(){
throw new Error("Module.patch must be run first");
},






Module._includeNative=function(){
throw new Error("Module.patch must be run first");
},









Module.patch=function(globalCtx,url,port){
const defaultURL="android"===process.platform&&"sdk"===process.hardware?
"10.0.2.2":
"Simulator"===Ti.Platform.model?"127.0.0.1":"192.168.1.69";
Module._globalCtx=globalCtx,
global$1._globalCtx=globalCtx,
Module._url=url||defaultURL,
Module._port=parseInt(port,10)||8324,
Module._requireNative=require,
Module.evtServer&&Module.evtServer.close(),
Module._compileList=[];


try{
Ti.App.Properties.setBool("ti.android.bug2373.finishfalseroot",!1);
}catch(e){

}

globalCtx.localeStrings=Module.require("localeStrings"),
Module.connectServer();
},




Module.global.reload=function(){
try{
Module.evtServer._proxy.close(),
console.log("[LiveView] Reloading App"),
Ti.App._restart();
}catch(e){
console.log("[LiveView] Reloading App via Legacy Method"),
Module.require("app");
}
},




Module.connectServer=function(){
let retryInterval=null;
const client=Module.evtServer=new Socket({host:Module._url,port:parseInt("8323",10)},function(){
console.log("[LiveView]","Connected to Event Server");
});

client.on("close",function(){
console.log("[LiveView]","Closed Previous Event Server client");
}),

client.on("connect",function(){
null!==retryInterval&&(
clearInterval(retryInterval),
console.log("[LiveView]","Reconnected to Event Server"));

}),

client.on("data",function(data){
if(data)


try{
const evt=JSON.parse(""+data);
"event"===evt.type&&"reload"===evt.name&&(
Module._cache={},
Module.global.reload());

}catch(e){}
}),

client.on("end",function(){
console.error("[LiveView]","Disconnected from Event Server"),
retryInterval=setInterval(function(){
console.log("[LiveView]","Attempting reconnect to Event Server"),
client.connect();
},2e3);
}),

client.on("error",function(e){
let err=e.error;
const code=~~e.code;
if(null===retryInterval||61!==code)








throw 61==code&&(err="Event Server unavailable. Connection Refused @ "+Module._url+":"+Module._port+"\n[LiveView] Please ensure your device and computer are on the same network and the port is not blocked."),new Error("[LiveView] "+err);
}),

client.connect(),
Module.require("app");
},







Module.include=function(ctx,id){
const file=id.replace(".js",""),
src=Module.prototype._getRemoteSource(file,1e4);
eval.call(ctx,src);
},








Module.toAbsolute=function(parent,relative){
let newPath=parent.split("/"),
parts=relative.split("/");

newPath.pop();

for(let i=0;i<parts.length;i++)
"."!==parts[i]&&(



".."===parts[i]?
newPath.pop():

newPath.push(parts[i]));


return newPath.join("/");
},







Module.require=function(id){
let fullPath=id;

if(0===fullPath.indexOf("./")||0===fullPath.indexOf("../")){
const parent=Module._compileList[Module._compileList.length-1];
fullPath=Module.toAbsolute(parent,fullPath);
}

const cached=Module.getCached(fullPath)||Module.getCached(fullPath.replace("/index",""))||Module.getCached(fullPath+"/index");

if(cached)
return cached.exports;


if(!Module.exists(fullPath))
if(0===fullPath.indexOf("/")&&Module.exists(fullPath+"/index"))
fullPath+="/index";else
{
const hlDir="/hyperloop/";
-1!==fullPath.indexOf(".*")&&(
fullPath=id.slice(0,id.length-2));


const modLowerCase=fullPath.toLowerCase();
if(Module.exists("/hyperloop/"+fullPath))
fullPath="/hyperloop/"+fullPath;else
if(Module.exists("/hyperloop/"+modLowerCase))
fullPath="/hyperloop/"+modLowerCase;else
if(-1===fullPath.indexOf(".")&&Module.exists("/hyperloop/"+fullPath+"/"+fullPath))
fullPath="/hyperloop/"+fullPath+"/"+fullPath;else
if(-1===fullPath.indexOf(".")&&Module.exists("/hyperloop/"+modLowerCase+"/"+modLowerCase))
fullPath="/hyperloop/"+modLowerCase+"/"+modLowerCase;else
{const
lastIndex=fullPath.lastIndexOf("."),
tempPath=hlDir+fullPath.slice(0,lastIndex)+"$"+fullPath.slice(lastIndex+1);
Module.exists(fullPath)&&(
fullPath=tempPath);

}
}


const freshModule=new Module(fullPath);




return freshModule.cache(),freshModule._compile(),freshModule.exports;
},








Module.getCached=function(id){
return Module._cache[id];
},








Module.exists=function(id){
const path=Ti.Filesystem.resourcesDirectory+id+".js",
file=Ti.Filesystem.getFile(path);

if(file.exists())
return!0;

if(!this.platform)
return!1;const


pFolderPath=Ti.Filesystem.resourcesDirectory+"/"+this.platform+"/"+id+".js",
pFile=Ti.Filesystem.getFile(pFolderPath);
return pFile.exists();
},









Module.prototype._getRemoteSource=function(file,timeout){const
expireTime=new Date().getTime()+timeout,
request=Ti.Network.createHTTPClient({
waitsForConnectivity:!0});let

rsp=null,
done=!1;
const url="http://"+Module._url+":"+Module._port+"/"+(file||this.id)+".js";








if(request.cache=!1,request.open("GET",url),request.setRequestHeader("x-platform",this.platform),request.send(),"windows"===this.platform&&request._waitForResponse){

if(request._waitForResponse(),4===request.readyState||404===request.status)
rsp=200===request.status&&request.responseText;else

throw new Error("[LiveView] File Server unavailable. Host Unreachable @ "+Module._url+":"+Module._port+"\n[LiveView] Please ensure your device and computer are on the same network and the port is not blocked.");

done=!0;
}for(;

!done;)
if(4===request.readyState||404===request.status)
rsp=200===request.status&&request.responseText,
done=!0;else
if(0>=expireTime-new Date().getTime())


throw rsp=!1,done=!0,new Error("[LiveView] File Server unavailable. Host Unreachable @ "+
Module._url+":"+Module._port+
"\n[LiveView] Please ensure your device and computer are on the same network and the port is not blocked.");



return rsp;
},






Module.prototype._getSource=function(){
let id=this.id;
const isRemote=/^(http|https)$/.test(id)||"liveview"===global$1.ENV;
if(isRemote)
return this._getRemoteSource(null,1e4);else
{
"app"===id&&(
id="_app");

const file=Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory,id+".js");
return(file.read()||{}).text;
}
},








Module._wrap=function(source){
return global$1.CATCH_ERRORS?Module._errWrapper[0]+source+Module._errWrapper[1]:source;
},


Module._errWrapper=[
"try {\n",
"\n} catch (err) {\nlvGlobal.process.emit(\"uncaughtException\", {module: __filename, error: err, source: module.source});\n}"],







Module.prototype._compile=function(){
const src=this._getSource();
if(!src)


return this.exports=Module._requireNative(this.id),void(this.loaded=!0);

Module._compileList.push(this.id),
this.source=Module._wrap(src);
try{
const fn=new Function("exports, require, module, __filename, __dirname, lvGlobal, L",this.source);
fn(this.exports,Module.require,this,this.filename,this.__dirname,global$1,L);
}catch(err){
process.emit("uncaughtException",{module:this.id,error:err,source:(""+this.source).split("\n")});
}

Module._compileList.pop(),
this.loaded=!0;
},






Module.prototype.cache=function(){
this.timestamp=new Date().getTime(),
Module._cache[this.id]=this;
},






Object.setPrototypeOf=Object.setPrototypeOf||function(obj,proto){


return obj.__proto__=proto,obj;
},

Module.patch(global,"192.168.1.69","8324"),



Titanium.App.idleTimerDisabled=!0;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpdmV2aWV3LmpzIl0sIm5hbWVzIjpbIkVtaXR0ZXIiLCJvYmoiLCJtaXhpbiIsImtleSIsInByb3RvdHlwZSIsIlByb2Nlc3MiLCJ0aXRsZSIsInZlcnNpb24iLCJtb2R1bGVMb2FkTGlzdCIsInZlcnNpb25zIiwiYXJjaCIsIlRpIiwiUGxhdGZvcm0iLCJhcmNoaXRlY3R1cmUiLCJwbGF0Zm9ybSIsImhhcmR3YXJlIiwibW9kZWwiLCJyZXBsYWNlIiwiU29ja2V0Iiwib3B0cyIsInRpbWVvdXQiLCJob3N0IiwicG9ydCIsInJldHJ5IiwiYnl0ZXNSZWFkIiwiYnl0ZXNXcml0dGVuIiwiaWdub3JlIiwiTW9kdWxlIiwiaWQiLCJmaWxlbmFtZSIsInByb2Nlc3MiLCJleHBvcnRzIiwibG9hZGVkIiwiTCIsIm5hbWUiLCJmaWxsZXIiLCJfZ2xvYmFsQ3R4IiwibG9jYWxlU3RyaW5ncyIsIkxvY2FsZSIsImN1cnJlbnRMYW5ndWFnZSIsIm9uIiwiZXZlbnQiLCJmbiIsIl9jYWxsYmFja3MiLCJwdXNoIiwib25jZSIsInNlbGYiLCJvZmYiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9vZmYiLCJjYWxsYmFja3MiLCJsZW5ndGgiLCJpIiwiaW5kZXhPZiIsInNwbGljZSIsImVtaXQiLCJhcmdzIiwic2xpY2UiLCJjYWxsIiwibGVuIiwibGlzdGVuZXJzIiwiaGFzTGlzdGVuZXJzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJjb25uZWN0IiwicmVDb25uZWN0IiwiX3Byb3h5IiwiTmV0d29yayIsImNyZWF0ZVRDUCIsImNvbm5lY3RlZCIsImUiLCJfY29ubmVjdGlvbiIsInNvY2tldCIsIlN0cmVhbSIsInB1bXAiLCJieXRlc1Byb2Nlc3NlZCIsImVycm9yU3RhdHVzIiwiY2xvc2UiLCJidWZmZXIiLCJlcnJvciIsImNvZGUiLCJzZXJ2ZXJFbmRlZCIsImNsb3NpbmciLCJ3cml0ZSIsInNldFRpbWVvdXQiLCJkYXRhIiwibXNnIiwiY3JlYXRlQnVmZmVyIiwidmFsdWUiLCJjYWxsYmFjayIsInNldEtlZXBBbGl2ZSIsImVuYWJsZSIsImluaXRpYWxEZWxheSIsIl9rZWVwQWxpdmUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJnbG9iYWwkMSIsIl9nbG9iYWwiLCJnbG9iYWwiLCJlcnIiLCJjb25zb2xlIiwibG9nIiwibW9kdWxlIiwibGluZSIsInNvdXJjZUlkIiwiYmFja3RyYWNlIiwiRU5WIiwibG9nZ2luZyIsIkNBVENIX0VSUk9SUyIsIl9jYWNoZSIsIl9yZXF1aXJlTmF0aXZlIiwiRXJyb3IiLCJfaW5jbHVkZU5hdGl2ZSIsInBhdGNoIiwiZ2xvYmFsQ3R4IiwidXJsIiwiZGVmYXVsdFVSTCIsIl91cmwiLCJfcG9ydCIsInBhcnNlSW50IiwicmVxdWlyZSIsImV2dFNlcnZlciIsIl9jb21waWxlTGlzdCIsIkFwcCIsIlByb3BlcnRpZXMiLCJzZXRCb29sIiwiY29ubmVjdFNlcnZlciIsInJlbG9hZCIsIl9yZXN0YXJ0IiwicmV0cnlJbnRlcnZhbCIsImNsaWVudCIsImV2dCIsIkpTT04iLCJwYXJzZSIsInR5cGUiLCJpbmNsdWRlIiwiY3R4IiwiZmlsZSIsInNyYyIsIl9nZXRSZW1vdGVTb3VyY2UiLCJldmFsIiwidG9BYnNvbHV0ZSIsInBhcmVudCIsInJlbGF0aXZlIiwibmV3UGF0aCIsInNwbGl0IiwicGFydHMiLCJwb3AiLCJqb2luIiwiZnVsbFBhdGgiLCJjYWNoZWQiLCJnZXRDYWNoZWQiLCJleGlzdHMiLCJobERpciIsIm1vZExvd2VyQ2FzZSIsInRvTG93ZXJDYXNlIiwibGFzdEluZGV4IiwibGFzdEluZGV4T2YiLCJ0ZW1wUGF0aCIsImZyZXNoTW9kdWxlIiwiY2FjaGUiLCJfY29tcGlsZSIsInBhdGgiLCJGaWxlc3lzdGVtIiwicmVzb3VyY2VzRGlyZWN0b3J5IiwiZ2V0RmlsZSIsInBGb2xkZXJQYXRoIiwicEZpbGUiLCJleHBpcmVUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJyZXF1ZXN0IiwiY3JlYXRlSFRUUENsaWVudCIsIndhaXRzRm9yQ29ubmVjdGl2aXR5IiwicnNwIiwiZG9uZSIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIl93YWl0Rm9yUmVzcG9uc2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwiX2dldFNvdXJjZSIsImlzUmVtb3RlIiwidGVzdCIsInJlYWQiLCJ0ZXh0IiwiX3dyYXAiLCJzb3VyY2UiLCJfZXJyV3JhcHBlciIsIkZ1bmN0aW9uIiwiX19kaXJuYW1lIiwidGltZXN0YW1wIiwicHJvdG8iLCJfX3Byb3RvX18iLCJUaXRhbml1bSIsImlkbGVUaW1lckRpc2FibGVkIl0sIm1hcHBpbmdzIjoiQUFBQyxXQUFZO0FBQ1o7Ozs7Ozs7Ozs7Ozs7QUFhQSxRQUFTQSxDQUFBQSxPQUFULENBQWlCQyxHQUFqQixDQUFzQjtBQUNyQixHQUFJQSxHQUFKO0FBQ0MsTUFBT0MsQ0FBQUEsS0FBSyxDQUFDRCxHQUFELENBQVo7O0FBRUQ7Ozs7Ozs7OztBQVNELFFBQVNDLENBQUFBLEtBQVQsQ0FBZUQsR0FBZixDQUFvQjtBQUNuQixJQUFLLEtBQU1FLENBQUFBLEdBQVgsR0FBa0JILENBQUFBLE9BQU8sQ0FBQ0ksU0FBMUI7QUFDQ0gsR0FBRyxDQUFDRSxHQUFELENBQUgsQ0FBV0gsT0FBTyxDQUFDSSxTQUFSLENBQWtCRCxHQUFsQixDQUFYOztBQUVELE1BQU9GLENBQUFBLEdBQVA7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkhELFFBQVNJLENBQUFBLE9BQVQsRUFBbUI7QUFDWixlQUFnQkEsQ0FBQUEsT0FESjs7O0FBSWxCLEtBQUtDLEtBQUwsQ0FBYSxVQUpLO0FBS2xCLEtBQUtDLE9BQUwsQ0FBZSxFQUxHO0FBTWxCLEtBQUtDLGNBQUwsQ0FBc0IsRUFOSjtBQU9sQixLQUFLQyxR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QXJCLENBQXFDLE1BQXJDLENBcnZCWTs7OztBQXl2QlprRyxRQUFRLENBQUN6RSxHQUFULENBQWEwRSxpQkFBYixHQXp2Qlk7O0FBMnZCWixDQTN2QkEsRyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvKlxuXHQgKiBFdmVudCBFbWl0dGVyc1xuXHQgKi9cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0IHRvIGJlIG1peGVkIGluIHRvIGVtaXR0ZXJcblx0ICogQHJldHVybnMge0VtaXR0ZXJ9XG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdGZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XG5cdFx0aWYgKG9iaikge1xuXHRcdFx0cmV0dXJuIG1peGluKG9iaik7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmogb2JqZWN0IHRvIGJlIG1peGVkIGluXG5cdCAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHdpdGggRW1pdHRlciBwcm9wZXJ0aWVzIG1peGVkIGluXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBtaXhpbihvYmopIHtcblx0XHRmb3IgKGNvbnN0IGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xuXHRcdFx0b2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xuXHRcdH1cblx0XHRyZXR1cm4gb2JqO1xuXHR9XG5cblx0LyoqXG5cdCAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBldmVudCBuYW1lIHRvIGhvb2sgY2FsbGJhY2sgdG9cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gY2FsbGJhY2sgZnVuY3Rpb25cblx0ICogQHJldHVybiB7RW1pdHRlcn0gdGhpc1xuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcblx0XHR0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cdFx0KHRoaXMuX2NhbGxiYWNrc1tldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdIHx8IFtdKVxuXHRcdFx0LnB1c2goZm4pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcblx0ICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IGV2ZW50IG5hbWUgdG8gaG9vayBjYWxsYmFjayB0b1xuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBjYWxsYmFjayBmdW5jdGlvblxuXHQgKiBAcmV0dXJuIHtFbWl0dGVyfSB0aGlzXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0dGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogc2luZ2xlLWZpcmUgY2FsbGJhY2sgZm9yIGV2ZW50XG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gb24oKSB7XG5cdFx0XHRzZWxmLm9mZihldmVudCwgb24pO1xuXHRcdFx0Zm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHR9XG5cblx0XHRmbi5fb2ZmID0gb247XG5cdFx0dGhpcy5vbihldmVudCwgb24pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxuXHQgKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IGV2ZW50IG5hbWUgdG8gcmVtb3ZlIGNhbGxiYWNrIGZyb21cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gY2FsbGJhY2sgZnVuY3Rpb25cblx0ICogQHJldHVybiB7RW1pdHRlcn0gdGhpc1xuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG5cdFx0dGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuXHRcdGxldCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO1xuXHRcdGlmICghY2FsbGJhY2tzKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyByZW1vdmUgYWxsIGhhbmRsZXJzXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRcdGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcblx0XHRjb25zdCBpID0gY2FsbGJhY2tzLmluZGV4T2YoZm4uX29mZiB8fCBmbik7XG5cdFx0aWYgKH5pKSB7XG5cdFx0XHRjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBldmVudCBuYW1lXG5cdCAqIEByZXR1cm4ge0VtaXR0ZXJ9XG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHR0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cdFx0Y29uc3QgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblx0XHRsZXQgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzW2V2ZW50XTtcblxuXHRcdGlmIChjYWxsYmFja3MpIHtcblx0XHRcdGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcblx0XHRcdGZvciAobGV0IGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdFx0Y2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgZXZlbnQgbmFtZVxuXHQgKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgb2YgY2FsbGJhY2tzIHJlZ2lzdGVyZWQgZm9yIHRoYXQgZXZlbnRcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0dGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuXHRcdHJldHVybiB0aGlzLl9jYWxsYmFja3NbZXZlbnRdIHx8IFtdO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBldmVudCBuYW1lXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdEVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdHJldHVybiAhIXRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XG5cdH07XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemUgYSBuZXcgYFByb2Nlc3NgLlxuXHQgKiBAcmV0dXJucyB7UHJvY2Vzc31cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0ZnVuY3Rpb24gUHJvY2VzcygpIHtcblx0XHRpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvY2VzcykpIHtcblx0XHRcdHJldHVybiBuZXcgUHJvY2VzcygpO1xuXHRcdH1cblx0XHR0aGlzLnRpdGxlID0gJ3RpdGFuaXVtJztcblx0XHR0aGlzLnZlcnNpb24gPSAnJztcblx0XHR0aGlzLm1vZHVsZUxvYWRMaXN0ID0gW107XG5cdFx0dGhpcy52ZXJzaW9ucyA9IHt9O1xuXHRcdHRoaXMuYXJjaCA9IFRpLlBsYXRmb3JtLmFyY2hpdGVjdHVyZTtcblx0XHR0aGlzLnBsYXRmb3JtID0gVGkuUGxhdGZvcm0ub3NuYW1lO1xuXHRcdHRoaXMuaGFyZHdhcmUgPSAoJycgKyBUaS5QbGF0Zm9ybS5tb2RlbCkucmVwbGFjZSgnZ29vZ2xlXycpO1xuXHR9XG5cblx0Ly8gaW5oZXJpdCBmcm9tIEV2ZW50RW1pdHRlclxuXHRPYmplY3Quc2V0UHJvdG90eXBlT2YoUHJvY2Vzcy5wcm90b3R5cGUsIEVtaXR0ZXIucHJvdG90eXBlKTtcblxuXHQvKipcblx0ICogW1NvY2tldCBkZXNjcmlwdGlvbl1cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdHMgW2Rlc2NyaXB0aW9uXVxuXHQgKiBAcmV0dXJucyB7U29ja2V0fVxuXHQgKi9cblx0ZnVuY3Rpb24gU29ja2V0KG9wdHMpIHtcblx0XHRpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ja2V0KSkge1xuXHRcdFx0cmV0dXJuIG5ldyBTb2NrZXQob3B0cyk7XG5cdFx0fVxuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdHRoaXMudGltZW91dCA9IDUwMDA7XG5cdFx0dGhpcy5ob3N0ID0gb3B0cy5ob3N0O1xuXHRcdHRoaXMucG9ydCA9IG9wdHMucG9ydDtcblx0XHR0aGlzLnJldHJ5ID0gb3B0cy5yZXRyeTtcblx0XHR0aGlzLmJ5dGVzUmVhZCA9IDA7XG5cdFx0dGhpcy5ieXRlc1dyaXR0ZW4gPSAwO1xuXHRcdHRoaXMuaWdub3JlID0gW107XG5cdH1cblxuXHQvKipcblx0ICogSW5oZXJpdCBmcm9tIGBFbWl0dGVyLnByb3RvdHlwZWAuXG5cdCAqL1xuXHRPYmplY3Quc2V0UHJvdG90eXBlT2YoU29ja2V0LnByb3RvdHlwZSwgRW1pdHRlci5wcm90b3R5cGUpO1xuXG5cdC8qKlxuXHQgKiBbY29ubmVjdCBkZXNjcmlwdGlvbl1cblx0ICogQHBhcmFtICB7T2JqZWN0fSAgIG9wdHMgW2Rlc2NyaXB0aW9uXVxuXHQgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRTb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAob3B0cywgZm4pIHtcblx0XHRvcHRzID0gb3B0cyB8fCB7fTtcblx0XHRpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGZuID0gb3B0cztcblx0XHRcdG9wdHMgPSB7fTtcblx0XHR9XG5cblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRzZWxmLmhvc3QgPSBvcHRzLmhvc3QgfHwgc2VsZi5ob3N0IHx8ICcxMjcuMC4wLjEnO1xuXHRcdHNlbGYucG9ydCA9IG9wdHMucG9ydCB8fCBzZWxmLnBvcnQ7XG5cdFx0c2VsZi5yZXRyeSA9IG9wdHMucmV0cnkgfHwgc2VsZi5yZXRyeTtcblxuXHRcdGNvbnN0IHJlQ29ubmVjdCA9ICEhb3B0cy5yZUNvbm5lY3Q7XG5cdFx0dGhpcy5fcHJveHkgPSBUaS5OZXR3b3JrLlNvY2tldC5jcmVhdGVUQ1Aoe1xuXHRcdFx0aG9zdDogc2VsZi5ob3N0LFxuXHRcdFx0cG9ydDogc2VsZi5wb3J0LFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBbZGVzY3JpcHRpb25dXG5cdFx0XHQgKiBAcGFyYW0gIHtPYmplY3R9IGUgW2Rlc2NyaXB0aW9uXVxuXHRcdFx0ICovXG5cdFx0XHRjb25uZWN0ZWQ6IGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdHNlbGYuY29ubmVjdGVkID0gdHJ1ZTtcblx0XHRcdFx0c2VsZi5fY29ubmVjdGlvbiA9IGUuc29ja2V0O1xuXHRcdFx0XHRmbiAmJiBmbihlKTtcblx0XHRcdFx0c2VsZi5lbWl0KCgocmVDb25uZWN0KSA/ICdyZWNvbm5lY3QnIDogJ2Nvbm5lY3QnKSwgZSk7XG5cblx0XHRcdFx0VGkuU3RyZWFtLnB1bXAoZS5zb2NrZXQsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0aWYgKGUuYnl0ZXNQcm9jZXNzZWQgPCAwIHx8ICEhZS5lcnJvclN0YXR1cykge1xuXHRcdFx0XHRcdFx0c2VsZi5fcHJveHkuY2xvc2UoKTtcblx0XHRcdFx0XHRcdHNlbGYuY2xvc2UodHJ1ZSk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuZW1pdCgnZGF0YScsICcnICsgZS5idWZmZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgMTAyNCwgdHJ1ZSk7XG5cdFx0XHR9LFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBbZGVzY3JpcHRpb25dXG5cdFx0XHQgKiBAcGFyYW0gIHtPYmplY3R9IGUgW2Rlc2NyaXB0aW9uXVxuXHRcdFx0ICogQHJldHVybnMge3VuZGVmaW5lZH1cblx0XHRcdCAqL1xuXHRcdFx0ZXJyb3I6IGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdGlmICghfnNlbGYuaWdub3JlLmluZGV4T2YoZS5jb2RlKSkge1xuXHRcdFx0XHRcdHJldHVybiBzZWxmLmVtaXQoJ2Vycm9yJywgZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvciBpZ25vcmVkJywgZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLl9wcm94eS5jb25uZWN0KCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFtjbG9zZSBkZXNjcmlwdGlvbl1cblx0ICogQHBhcmFtIHtib29sZWFufSBzZXJ2ZXJFbmRlZCBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRTb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKHNlcnZlckVuZGVkKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cblx0XHRzZWxmLmNvbm5lY3RlZCA9IGZhbHNlO1xuXHRcdHNlbGYuY2xvc2luZyA9ICFzZXJ2ZXJFbmRlZDtcblxuXHRcdGlmIChzZWxmLmNsb3NpbmcpIHtcblx0XHRcdHNlbGYud3JpdGUoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLl9wcm94eS5jbG9zZSgpO1xuXHRcdFx0XHRzZWxmLmVtaXQoJ2Nsb3NlJyk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCByZXRyeSA9IH5+c2VsZi5yZXRyeTtcblxuXHRcdHNlbGYuZW1pdCgnZW5kJyk7XG5cdFx0aWYgKCFyZXRyeSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0c2VsZi5lbWl0KCdyZWNvbm5lY3RpbmcnKTtcblx0XHRcdHNlbGYuY29ubmVjdCh7IHJlQ29ubmVjdDogdHJ1ZSB9KTtcblx0XHR9LCByZXRyeSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFtkZXNjcmlwdGlvbl1cblx0ICogQHBhcmFtICB7c3RyaW5nfSAgIGRhdGEgW2Rlc2NyaXB0aW9uXVxuXHQgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRTb2NrZXQucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7XG5cdFx0aWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gbnVsbDtcblx0XHR9XG5cblx0XHRkYXRhID0gKGRhdGEpID8gICgnJyArIGRhdGEpIDogJyc7XG5cblx0XHRjb25zdCBtc2cgPSBUaS5jcmVhdGVCdWZmZXIoeyB2YWx1ZTogIGRhdGEgfSk7XG5cblx0XHRjb25zdCBjYWxsYmFjayA9IGZuIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG5cdFx0VGkuU3RyZWFtLndyaXRlKHRoaXMuX2Nvbm5lY3Rpb24sIG1zZywgZnVuY3Rpb24gKCkge1xuXHRcdFx0Y2FsbGJhY2soW10uc2xpY2UoYXJndW1lbnRzKSk7XG5cdFx0fSk7XG5cblx0fTtcblxuXHQvKipcblx0ICogW3NldEtlZXBBbGl2ZSBkZXNjcmlwdGlvbl1cblx0ICogQHBhcmFtIHtib29sZWFufSBlbmFibGUgICAgICAgW2Rlc2NyaXB0aW9uXVxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5pdGlhbERlbGF5IFtkZXNjcmlwdGlvbl1cblx0ICovXG5cdFNvY2tldC5wcm90b3R5cGUuc2V0S2VlcEFsaXZlID0gZnVuY3Rpb24gKGVuYWJsZSwgaW5pdGlhbERlbGF5KSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0aWYgKCFlbmFibGUpIHtcblx0XHRcdHNlbGYuX2tlZXBBbGl2ZSAmJiBjbGVhckludGVydmFsKHNlbGYuX2tlZXBBbGl2ZSk7XG5cdFx0XHRzZWxmLl9rZWVwQWxpdmUgPSBudWxsO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRzZWxmLl9rZWVwQWxpdmUgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG5cdFx0XHRzZWxmLndyaXRlKCdwaW5nJyk7XG5cdFx0fSwgaW5pdGlhbERlbGF5IHx8IDMwMDAwMCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemUgYSBuZXcgYE1vZHVsZWAuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgbW9kdWxlIGlkZW50aWZpZXJcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0ZnVuY3Rpb24gTW9kdWxlKGlkKSB7XG5cdFx0dGhpcy5maWxlbmFtZSA9IGlkICsgJy5qcyc7XG5cdFx0dGhpcy5pZCA9IGlkO1xuXHRcdGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnaXBhZCcpIHtcblx0XHRcdHRoaXMucGxhdGZvcm0gPSAnaXBob25lJztcblx0XHR9IGVsc2UgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW5kb3dzcGhvbmUnIHx8IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW5kb3dzc3RvcmUnKSB7XG5cdFx0XHR0aGlzLnBsYXRmb3JtID0gJ3dpbmRvd3MnO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBsYXRmb3JtID0gcHJvY2Vzcy5wbGF0Zm9ybTtcblx0XHR9XG5cdFx0dGhpcy5leHBvcnRzID0ge307XG5cdFx0dGhpcy5sb2FkZWQgPSBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIEwobmFtZSwgZmlsbGVyKSB7XG5cdFx0cmV0dXJuIChNb2R1bGUuX2dsb2JhbEN0eC5sb2NhbGVTdHJpbmdzW1RpLkxvY2FsZS5jdXJyZW50TGFuZ3VhZ2VdIHx8IHt9KVtuYW1lXSB8fCBmaWxsZXIgfHwgbmFtZTtcblx0fVxuXG5cdC8vIGdsb2JhbCBuYW1lc3BhY2Vcblx0Y29uc3QgZ2xvYmFsJDEgPSBNb2R1bGUuX2dsb2JhbCA9IE1vZHVsZS5nbG9iYWwgPSB7fTtcblxuXHQvLyBtYWluIHByb2Nlc3Ncblx0Y29uc3QgcHJvY2VzcyA9IGdsb2JhbCQxLnByb2Nlc3MgPSBuZXcgUHJvY2VzcygpO1xuXHRwcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRjb25zb2xlLmxvZygnW0xpdmVWaWV3XSBFcnJvciBFdmFsdWF0aW5nJywgZXJyLm1vZHVsZSwgJ0AgTGluZTonLCBlcnIuZXJyb3IubGluZSk7XG5cdFx0Ly8gY29uc29sZS5lcnJvcignTGluZSAnICsgZXJyLmVycm9yLmxpbmUsICc6JywgZXJyLnNvdXJjZVtlcnIuZXJyb3IubGluZV0pO1xuXHRcdGNvbnNvbGUuZXJyb3IoJycgKyBlcnIuZXJyb3IpO1xuXHRcdGNvbnNvbGUuZXJyb3IoJ0ZpbGU6JywgZXJyLm1vZHVsZSk7XG5cdFx0Y29uc29sZS5lcnJvcignTGluZTonLCBlcnIuZXJyb3IubGluZSk7XG5cdFx0Y29uc29sZS5lcnJvcignU291cmNlSWQ6JywgZXJyLmVycm9yLnNvdXJjZUlkKTtcblx0XHRjb25zb2xlLmVycm9yKCdCYWNrdHJhY2U6XFxuJywgKCcnICsgZXJyLmVycm9yLmJhY2t0cmFjZSkucmVwbGFjZSgvJ1xcbicvZywgJ1xcbicpKTtcblx0fSk7XG5cblx0Ly8gc2V0IGVudmlyb25tZW50IHR5cGVcblx0Z2xvYmFsJDEuRU5WID0gJ2xpdmV2aWV3JztcblxuXHQvLyBzZXQgbG9nZ2luZ1xuXHRnbG9iYWwkMS5sb2dnaW5nID0gZmFsc2U7XG5cblx0Ly8gY2F0Y2ggdW5jYXVnaHQgZXJyb3JzXG5cdGdsb2JhbCQxLkNBVENIX0VSUk9SUyA9IHRydWU7XG5cblx0Ly8gbW9kdWxlIGNhY2hlXG5cdE1vZHVsZS5fY2FjaGUgPSB7fTtcblxuXHQvKipcblx0ICogcGxhY2UgaG9sZGVyIGZvciBuYXRpdmUgcmVxdWlyZSB1bnRpbCBwYXRjaGVkXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRNb2R1bGUuX3JlcXVpcmVOYXRpdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdNb2R1bGUucGF0Y2ggbXVzdCBiZSBydW4gZmlyc3QnKTtcblx0fTtcblxuXHQvKipcblx0ICogcGxhY2UgaG9sZGVyIGZvciBuYXRpdmUgcmVxdWlyZSB1bnRpbCBwYXRjaGVkXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRNb2R1bGUuX2luY2x1ZGVOYXRpdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdNb2R1bGUucGF0Y2ggbXVzdCBiZSBydW4gZmlyc3QnKTtcblx0fTtcblxuXHQvKipcblx0ICogcmVwbGFjZSBidWlsdCBpbiBgcmVxdWlyZWAgZnVuY3Rpb25cblx0ICpcblx0ICogQHBhcmFtICB7T2JqZWN0fSBnbG9iYWxDdHggR2xvYmFsIGNvbnRleHRcblx0ICogQHBhcmFtICB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB1c2UgKGRlZmF1bHQgaXMgJzEyNy4wLjAuMScsIG9yICcxMC4wLjIuMicgb24gYW5kcm9pZCBlbXVsYXRvcilcblx0ICogQHBhcmFtICB7bnVtYmVyfSBwb3J0IFRoZSBwb3J0IHRvIHVzZSAoZGVmYXVsdCBpcyA4MzI0KVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0TW9kdWxlLnBhdGNoID0gZnVuY3Rpb24gKGdsb2JhbEN0eCwgdXJsLCBwb3J0KSB7XG5cdFx0Y29uc3QgIGRlZmF1bHRVUkwgPSAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnICYmIHByb2Nlc3MuaGFyZHdhcmUgPT09ICdzZGsnKVxuXHRcdFx0PyAnMTAuMC4yLjInXG5cdFx0XHQ6IChUaS5QbGF0Zm9ybS5tb2RlbCA9PT0gJ1NpbXVsYXRvcicgPyAnMTI3LjAuMC4xJyA6ICcxOTIuMTY4LjEuNjknKTtcblx0XHRNb2R1bGUuX2dsb2JhbEN0eCA9IGdsb2JhbEN0eDtcblx0XHRnbG9iYWwkMS5fZ2xvYmFsQ3R4ID0gZ2xvYmFsQ3R4O1xuXHRcdE1vZHVsZS5fdXJsID0gdXJsIHx8IGRlZmF1bHRVUkw7XG5cdFx0TW9kdWxlLl9wb3J0ID0gcGFyc2VJbnQocG9ydCwgMTApIHx8IDgzMjQ7XG5cdFx0TW9kdWxlLl9yZXF1aXJlTmF0aXZlID0gcmVxdWlyZTtcblx0XHRNb2R1bGUuZXZ0U2VydmVyICYmIE1vZHVsZS5ldnRTZXJ2ZXIuY2xvc2UoKTtcblx0XHRNb2R1bGUuX2NvbXBpbGVMaXN0ID0gW107XG5cblx0XHQvLyBGSVggZm9yIGFuZHJvaWQgYnVnXG5cdFx0dHJ5IHtcblx0XHRcdFRpLkFwcC5Qcm9wZXJ0aWVzLnNldEJvb2woJ3RpLmFuZHJvaWQuYnVnMjM3My5maW5pc2hmYWxzZXJvb3QnLCBmYWxzZSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Ly8gaWdub3JlXG5cdFx0fVxuXG5cdFx0Z2xvYmFsQ3R4LmxvY2FsZVN0cmluZ3MgPSBNb2R1bGUucmVxdWlyZSgnbG9jYWxlU3RyaW5ncycpO1xuXHRcdE1vZHVsZS5jb25uZWN0U2VydmVyKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFtyZWxvYWQgZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRNb2R1bGUuZ2xvYmFsLnJlbG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0TW9kdWxlLmV2dFNlcnZlci5fcHJveHkuY2xvc2UoKTtcblx0XHRcdGNvbnNvbGUubG9nKCdbTGl2ZVZpZXddIFJlbG9hZGluZyBBcHAnKTtcblx0XHRcdFRpLkFwcC5fcmVzdGFydCgpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdbTGl2ZVZpZXddIFJlbG9hZGluZyBBcHAgdmlhIExlZ2FjeSBNZXRob2QnKTtcblx0XHRcdE1vZHVsZS5yZXF1aXJlKCdhcHAnKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFtkZXNjcmlwdGlvbl1cblx0ICovXG5cdE1vZHVsZS5jb25uZWN0U2VydmVyID0gZnVuY3Rpb24gKCkge1xuXHRcdGxldCByZXRyeUludGVydmFsID0gbnVsbDtcblx0XHRjb25zdCBjbGllbnQgPSBNb2R1bGUuZXZ0U2VydmVyID0gbmV3IFNvY2tldCh7IGhvc3Q6IE1vZHVsZS5fdXJsLCBwb3J0OiBwYXJzZUludCgnODMyMycsIDEwKSB9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnW0xpdmVWaWV3XScsICdDb25uZWN0ZWQgdG8gRXZlbnQgU2VydmVyJyk7XG5cdFx0fSk7XG5cblx0XHRjbGllbnQub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0Y29uc29sZS5sb2coJ1tMaXZlVmlld10nLCAnQ2xvc2VkIFByZXZpb3VzIEV2ZW50IFNlcnZlciBjbGllbnQnKTtcblx0XHR9KTtcblxuXHRcdGNsaWVudC5vbignY29ubmVjdCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChyZXRyeUludGVydmFsICE9PSBudWxsKSB7XG5cdFx0XHRcdGNsZWFySW50ZXJ2YWwocmV0cnlJbnRlcnZhbCk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdbTGl2ZVZpZXddJywgJ1JlY29ubmVjdGVkIHRvIEV2ZW50IFNlcnZlcicpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Y2xpZW50Lm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdGlmICghZGF0YSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBldnQgPSBKU09OLnBhcnNlKCcnICsgZGF0YSk7XG5cdFx0XHRcdGlmIChldnQudHlwZSA9PT0gJ2V2ZW50JyAmJiBldnQubmFtZSA9PT0gJ3JlbG9hZCcpIHtcblx0XHRcdFx0XHRNb2R1bGUuX2NhY2hlID0ge307XG5cdFx0XHRcdFx0TW9kdWxlLmdsb2JhbC5yZWxvYWQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkgeyAvKiBkaXNjYXJkIG5vbiBKU09OIGRhdGEgZm9yIG5vdyAqLyB9XG5cdFx0fSk7XG5cblx0XHRjbGllbnQub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1tMaXZlVmlld10nLCAnRGlzY29ubmVjdGVkIGZyb20gRXZlbnQgU2VydmVyJyk7XG5cdFx0XHRyZXRyeUludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnW0xpdmVWaWV3XScsICdBdHRlbXB0aW5nIHJlY29ubmVjdCB0byBFdmVudCBTZXJ2ZXInKTtcblx0XHRcdFx0Y2xpZW50LmNvbm5lY3QoKTtcblx0XHRcdH0sIDIwMDApO1xuXHRcdH0pO1xuXG5cdFx0Y2xpZW50Lm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRsZXQgZXJyID0gZS5lcnJvcjtcblx0XHRcdGNvbnN0IGNvZGUgPSB+fmUuY29kZTtcblx0XHRcdGlmIChyZXRyeUludGVydmFsICE9PSBudWxsICYmIGNvZGUgPT09IDYxKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNvZGUgPT09IDYxKSB7XG5cdFx0XHRcdGVyciA9ICdFdmVudCBTZXJ2ZXIgdW5hdmFpbGFibGUuIENvbm5lY3Rpb24gUmVmdXNlZCBAICdcblx0XHRcdFx0XHQrIE1vZHVsZS5fdXJsICsgJzonICsgTW9kdWxlLl9wb3J0XG5cdFx0XHRcdFx0KyAnXFxuW0xpdmVWaWV3XSBQbGVhc2UgZW5zdXJlIHlvdXIgZGV2aWNlIGFuZCBjb21wdXRlciBhcmUgb24gdGhlIHNhbWUgbmV0d29yayBhbmQgdGhlIHBvcnQgaXMgbm90IGJsb2NrZWQuJztcblx0XHRcdH1cblx0XHRcdHRocm93IG5ldyBFcnJvcignW0xpdmVWaWV3XSAnICsgZXJyKTtcblx0XHR9KTtcblxuXHRcdGNsaWVudC5jb25uZWN0KCk7XG5cdFx0TW9kdWxlLnJlcXVpcmUoJ2FwcCcpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBpbmNsdWRlIHNjcmlwdCBsb2FkZXJcblx0ICogQHBhcmFtICB7c3RyaW5nfSBjdHggY29udGV4dFxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IGlkIG1vZHVsZSBpZGVudGlmaWVyXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdE1vZHVsZS5pbmNsdWRlID0gZnVuY3Rpb24gKGN0eCwgaWQpIHtcblx0XHRjb25zdCBmaWxlID0gaWQucmVwbGFjZSgnLmpzJywgJycpLFxuXHRcdFx0c3JjID0gTW9kdWxlLnByb3RvdHlwZS5fZ2V0UmVtb3RlU291cmNlKGZpbGUsIDEwMDAwKTtcblx0XHRldmFsLmNhbGwoY3R4LCBzcmMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcblx0fTtcblxuXHQvKipcblx0ICogY29udmVydCByZWxhdGl2ZSB0byBhYnNvbHV0ZSBwYXRoXG5cdCAqIEBwYXJhbSAge3N0cmluZ30gcGFyZW50IHBhcmVudCBmaWxlIHBhdGhcblx0ICogQHBhcmFtICB7c3RyaW5nfSByZWxhdGl2ZSByZWxhdGl2ZSBwYXRoIGluIHJlcXVpcmVcblx0ICogQHJldHVybiB7c3RyaW5nfSBhYnNvbHV0ZSBwYXRoIG9mIHRoZSByZXF1aXJlZCBmaWxlXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdE1vZHVsZS50b0Fic29sdXRlID0gZnVuY3Rpb24gKHBhcmVudCwgcmVsYXRpdmUpIHtcblx0XHRsZXQgbmV3UGF0aCA9IHBhcmVudC5zcGxpdCgnLycpLFxuXHRcdFx0cGFydHMgPSByZWxhdGl2ZS5zcGxpdCgnLycpO1xuXG5cdFx0bmV3UGF0aC5wb3AoKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChwYXJ0c1tpXSA9PT0gJy4nKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocGFydHNbaV0gPT09ICcuLicpIHtcblx0XHRcdFx0bmV3UGF0aC5wb3AoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5ld1BhdGgucHVzaChwYXJ0c1tpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBuZXdQYXRoLmpvaW4oJy8nKTtcblx0fTtcblxuXHQvKipcblx0ICogY29tbW9uanMgbW9kdWxlIGxvYWRlclxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IGlkIG1vZHVsZSBpZGVudGlmaWVyXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9XG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdE1vZHVsZS5yZXF1aXJlID0gZnVuY3Rpb24gKGlkKSB7XG5cdFx0bGV0IGZ1bGxQYXRoID0gaWQ7XG5cblx0XHRpZiAoZnVsbFBhdGguaW5kZXhPZignLi8nKSA9PT0gMCB8fCBmdWxsUGF0aC5pbmRleE9mKCcuLi8nKSA9PT0gMCkge1xuXHRcdFx0Y29uc3QgcGFyZW50ID0gTW9kdWxlLl9jb21waWxlTGlzdFtNb2R1bGUuX2NvbXBpbGVMaXN0Lmxlbmd0aCAtIDFdO1xuXHRcdFx0ZnVsbFBhdGggPSBNb2R1bGUudG9BYnNvbHV0ZShwYXJlbnQsIGZ1bGxQYXRoKTtcblx0XHR9XG5cblx0XHRjb25zdCBjYWNoZWQgPSBNb2R1bGUuZ2V0Q2FjaGVkKGZ1bGxQYXRoKSB8fCBNb2R1bGUuZ2V0Q2FjaGVkKGZ1bGxQYXRoLnJlcGxhY2UoJy9pbmRleCcsICcnKSkgfHwgTW9kdWxlLmdldENhY2hlZChmdWxsUGF0aCArICcvaW5kZXgnKTtcblxuXHRcdGlmIChjYWNoZWQpIHtcblx0XHRcdHJldHVybiBjYWNoZWQuZXhwb3J0cztcblx0XHR9XG5cblx0XHRpZiAoIU1vZHVsZS5leGlzdHMoZnVsbFBhdGgpKSB7XG5cdFx0XHRpZiAoZnVsbFBhdGguaW5kZXhPZignLycpID09PSAwICYmIE1vZHVsZS5leGlzdHMoZnVsbFBhdGggKyAnL2luZGV4JykpIHtcblx0XHRcdFx0ZnVsbFBhdGggKz0gJy9pbmRleCc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCBobERpciA9ICcvaHlwZXJsb29wLyc7XG5cdFx0XHRcdGlmIChmdWxsUGF0aC5pbmRleE9mKCcuKicpICE9PSAtMSkge1xuXHRcdFx0XHRcdGZ1bGxQYXRoID0gaWQuc2xpY2UoMCwgaWQubGVuZ3RoIC0gMik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBtb2RMb3dlckNhc2UgPSBmdWxsUGF0aC50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRpZiAoTW9kdWxlLmV4aXN0cyhobERpciArIGZ1bGxQYXRoKSkge1xuXHRcdFx0XHRcdGZ1bGxQYXRoID0gaGxEaXIgKyBmdWxsUGF0aDtcblx0XHRcdFx0fSBlbHNlIGlmIChNb2R1bGUuZXhpc3RzKGhsRGlyICsgbW9kTG93ZXJDYXNlKSkge1xuXHRcdFx0XHRcdGZ1bGxQYXRoID0gaGxEaXIgKyBtb2RMb3dlckNhc2U7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZnVsbFBhdGguaW5kZXhPZignLicpID09PSAtMSAmJiBNb2R1bGUuZXhpc3RzKGhsRGlyICsgZnVsbFBhdGggKyAnLycgKyBmdWxsUGF0aCkpIHtcblx0XHRcdFx0XHRmdWxsUGF0aCA9IGhsRGlyICsgZnVsbFBhdGggKyAnLycgKyBmdWxsUGF0aDtcblx0XHRcdFx0fSBlbHNlIGlmIChmdWxsUGF0aC5pbmRleE9mKCcuJykgPT09IC0xICYmIE1vZHVsZS5leGlzdHMoaGxEaXIgKyBtb2RMb3dlckNhc2UgKyAnLycgKyBtb2RMb3dlckNhc2UpKSB7XG5cdFx0XHRcdFx0ZnVsbFBhdGggPSBobERpciArIG1vZExvd2VyQ2FzZSArICcvJyArIG1vZExvd2VyQ2FzZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCBsYXN0SW5kZXggPSBmdWxsUGF0aC5sYXN0SW5kZXhPZignLicpO1xuXHRcdFx0XHRcdGNvbnN0IHRlbXBQYXRoID0gaGxEaXIgKyBmdWxsUGF0aC5zbGljZSgwLCBsYXN0SW5kZXgpICsgJyQnICsgZnVsbFBhdGguc2xpY2UobGFzdEluZGV4ICsgMSk7XG5cdFx0XHRcdFx0aWYgKE1vZHVsZS5leGlzdHMoZnVsbFBhdGgpKSB7XG5cdFx0XHRcdFx0XHRmdWxsUGF0aCA9IHRlbXBQYXRoO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IGZyZXNoTW9kdWxlID0gbmV3IE1vZHVsZShmdWxsUGF0aCk7XG5cblx0XHRmcmVzaE1vZHVsZS5jYWNoZSgpO1xuXHRcdGZyZXNoTW9kdWxlLl9jb21waWxlKCk7XG5cblx0XHRyZXR1cm4gZnJlc2hNb2R1bGUuZXhwb3J0cztcblx0fTtcblxuXHQvKipcblx0ICogW2dldENhY2hlZCBkZXNjcmlwdGlvbl1cblx0ICogQHBhcmFtICB7c3RyaW5nfSBpZCBtb2R1ZWwgaWRlbnRpZmllclxuXHQgKiBAcmV0dXJuIHtNb2R1bGV9IGNhY2hlZCBtb2R1bGVcblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0TW9kdWxlLmdldENhY2hlZCA9IGZ1bmN0aW9uIChpZCkge1xuXHRcdHJldHVybiBNb2R1bGUuX2NhY2hlW2lkXTtcblx0fTtcblxuXHQvKipcblx0ICogY2hlY2sgaWYgbW9kdWxlIGZpbGUgZXhpc3RzXG5cdCAqXG5cdCAqIEBwYXJhbSAge3N0cmluZ30gaWQgbW9kdWxlIGlkZW50aWZpZXJcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGUgbW9kdWxlIGV4aXN0c1xuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRNb2R1bGUuZXhpc3RzID0gZnVuY3Rpb24gKGlkKSB7XG5cdFx0Y29uc3QgcGF0aCA9IFRpLkZpbGVzeXN0ZW0ucmVzb3VyY2VzRGlyZWN0b3J5ICsgaWQgKyAnLmpzJyxcblx0XHRcdGZpbGUgPSBUaS5GaWxlc3lzdGVtLmdldEZpbGUocGF0aCk7XG5cblx0XHRpZiAoZmlsZS5leGlzdHMoKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5wbGF0Zm9ybSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBGb2xkZXJQYXRoID0gVGkuRmlsZXN5c3RlbS5yZXNvdXJjZXNEaXJlY3RvcnkgKyAnLycgKyB0aGlzLnBsYXRmb3JtICsgJy8nICsgaWQgKyAnLmpzJztcblx0XHRjb25zdCBwRmlsZSA9IFRpLkZpbGVzeXN0ZW0uZ2V0RmlsZShwRm9sZGVyUGF0aCk7XG5cdFx0cmV0dXJuIHBGaWxlLmV4aXN0cygpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBzaGFkeSB4aHJTeW5jIHJlcXVlc3Rcblx0ICpcblx0ICogQHBhcmFtICB7c3RyaW5nfSBmaWxlIGZpbGUgdG8gbG9hZFxuXHQgKiBAcGFyYW0gIHtudW1iZXJ9IHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG5cdCAqIEByZXR1cm4geyhzdHJpbmd8Ym9vbGVhbil9IGZpbGUgY29udGVudHMgaWYgc3VjY2Vzc2Z1bCwgZmFsc2UgaWYgbm90XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRNb2R1bGUucHJvdG90eXBlLl9nZXRSZW1vdGVTb3VyY2UgPSBmdW5jdGlvbiAoZmlsZSwgdGltZW91dCkge1xuXHRcdGNvbnN0IGV4cGlyZVRpbWUgID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyB0aW1lb3V0O1xuXHRcdGNvbnN0IHJlcXVlc3QgPSBUaS5OZXR3b3JrLmNyZWF0ZUhUVFBDbGllbnQoe1xuXHRcdFx0d2FpdHNGb3JDb25uZWN0aXZpdHk6IHRydWVcblx0XHR9KTtcblx0XHRsZXQgcnNwID0gbnVsbDtcblx0XHRsZXQgZG9uZSA9IGZhbHNlO1xuXHRcdGNvbnN0IHVybCA9ICdodHRwOi8vJyArIE1vZHVsZS5fdXJsICsgJzonICsgTW9kdWxlLl9wb3J0ICsgJy8nICsgKGZpbGUgfHwgdGhpcy5pZCkgKyAnLmpzJztcblx0XHRyZXF1ZXN0LmNhY2hlID0gZmFsc2U7XG5cdFx0cmVxdWVzdC5vcGVuKCdHRVQnLCB1cmwpO1xuXHRcdHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcigneC1wbGF0Zm9ybScsIHRoaXMucGxhdGZvcm0pO1xuXHRcdHJlcXVlc3Quc2VuZCgpO1xuXG5cdFx0Ly9cblx0XHQvLyBXaW5kb3dzIG9ubHkgcHJpdmF0ZSBBUEk6IF93YWl0Rm9yUmVzcG9uc2UoKSB3YWl0cyBmb3IgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlci5cblx0XHQvL1xuXHRcdGlmICh0aGlzLnBsYXRmb3JtID09PSAnd2luZG93cycgJiYgcmVxdWVzdC5fd2FpdEZvclJlc3BvbnNlKSB7XG5cdFx0XHRyZXF1ZXN0Ll93YWl0Rm9yUmVzcG9uc2UoKTtcblx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQgfHwgcmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xuXHRcdFx0XHRyc3AgPSByZXF1ZXN0LnN0YXR1cyA9PT0gMjAwID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiBmYWxzZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignW0xpdmVWaWV3XSBGaWxlIFNlcnZlciB1bmF2YWlsYWJsZS4gSG9zdCBVbnJlYWNoYWJsZSBAICcgKyBNb2R1bGUuX3VybCArICc6JyArIE1vZHVsZS5fcG9ydCArICdcXG5bTGl2ZVZpZXddIFBsZWFzZSBlbnN1cmUgeW91ciBkZXZpY2UgYW5kIGNvbXB1dGVyIGFyZSBvbiB0aGUgc2FtZSBuZXR3b3JrIGFuZCB0aGUgcG9ydCBpcyBub3QgYmxvY2tlZC4nKTtcblx0XHRcdH1cblx0XHRcdGRvbmUgPSB0cnVlO1xuXHRcdH1cblxuXHRcdHdoaWxlICghZG9uZSkge1xuXHRcdFx0aWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCB8fCByZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG5cdFx0XHRcdHJzcCA9IChyZXF1ZXN0LnN0YXR1cyA9PT0gMjAwKSA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogZmFsc2U7XG5cdFx0XHRcdGRvbmUgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIGlmICgoZXhwaXJlVGltZSAtICAobmV3IERhdGUoKSkuZ2V0VGltZSgpKSA8PSAwKSB7XG5cdFx0XHRcdHJzcCA9IGZhbHNlO1xuXHRcdFx0XHRkb25lID0gdHJ1ZTtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdbTGl2ZVZpZXddIEZpbGUgU2VydmVyIHVuYXZhaWxhYmxlLiBIb3N0IFVucmVhY2hhYmxlIEAgJ1xuXHRcdFx0XHRcdCsgTW9kdWxlLl91cmwgKyAnOicgKyBNb2R1bGUuX3BvcnRcblx0XHRcdFx0XHQrICdcXG5bTGl2ZVZpZXddIFBsZWFzZSBlbnN1cmUgeW91ciBkZXZpY2UgYW5kIGNvbXB1dGVyIGFyZSBvbiB0aGUgc2FtZSBuZXR3b3JrIGFuZCB0aGUgcG9ydCBpcyBub3QgYmxvY2tlZC4nKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcnNwO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBnZXQgbW9kdWxlIGZpbGUgc291cmNlIHRleHRcblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0TW9kdWxlLnByb3RvdHlwZS5fZ2V0U291cmNlID0gZnVuY3Rpb24gKCkge1xuXHRcdGxldCBpZCA9IHRoaXMuaWQ7XG5cdFx0Y29uc3QgaXNSZW1vdGUgPSAvXihodHRwfGh0dHBzKSQvLnRlc3QoaWQpIHx8IChnbG9iYWwkMS5FTlYgPT09ICdsaXZldmlldycpO1xuXHRcdGlmIChpc1JlbW90ZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2dldFJlbW90ZVNvdXJjZShudWxsLCAxMDAwMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChpZCA9PT0gJ2FwcCcpIHtcblx0XHRcdFx0aWQgPSAnX2FwcCc7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBmaWxlID0gVGkuRmlsZXN5c3RlbS5nZXRGaWxlKFRpLkZpbGVzeXN0ZW0ucmVzb3VyY2VzRGlyZWN0b3J5LCBpZCArICcuanMnKTtcblx0XHRcdHJldHVybiAoZmlsZS5yZWFkKCkgfHwge30pLnRleHQ7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiB3cmFwIG1vZHVsZSBzb3VyY2UgdGV4dCBpbiBjb21tb25qcyBhbm9uIGZ1bmN0aW9uIHdyYXBwZXJcblx0ICpcblx0ICogQHBhcmFtICB7c3RyaW5nfSBzb3VyY2UgVGhlIHJhdyBzb3VyY2Ugd2UncmUgd3JhcHBpbmcgaW4gYW4gSUlGRVxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRNb2R1bGUuX3dyYXAgPSBmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0cmV0dXJuIChnbG9iYWwkMS5DQVRDSF9FUlJPUlMpID8gTW9kdWxlLl9lcnJXcmFwcGVyWzBdICsgc291cmNlICsgTW9kdWxlLl9lcnJXcmFwcGVyWzFdIDogc291cmNlO1xuXHR9O1xuXG5cdC8vIHVuY2F1Z2h0IGV4Y2VwdGlvbiBoYW5kbGVyIHdyYXBwZXJcblx0TW9kdWxlLl9lcnJXcmFwcGVyID0gW1xuXHRcdCd0cnkge1xcbicsXG5cdFx0J1xcbn0gY2F0Y2ggKGVycikge1xcbmx2R2xvYmFsLnByb2Nlc3MuZW1pdChcInVuY2F1Z2h0RXhjZXB0aW9uXCIsIHttb2R1bGU6IF9fZmlsZW5hbWUsIGVycm9yOiBlcnIsIHNvdXJjZTogbW9kdWxlLnNvdXJjZX0pO1xcbn0nXG5cdF07XG5cblx0LyoqXG5cdCAqIGNvbXBpbGUgY29tbW9uanMgbW9kdWxlIGFuZCBzdHJpbmcgdG8ganNcblx0ICpcblx0ICogQHByaXZhdGVcblx0ICovXG5cdE1vZHVsZS5wcm90b3R5cGUuX2NvbXBpbGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc3Qgc3JjID0gdGhpcy5fZ2V0U291cmNlKCk7XG5cdFx0aWYgKCFzcmMpIHtcblx0XHRcdHRoaXMuZXhwb3J0cyA9IE1vZHVsZS5fcmVxdWlyZU5hdGl2ZSh0aGlzLmlkKTtcblx0XHRcdHRoaXMubG9hZGVkID0gdHJ1ZTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0TW9kdWxlLl9jb21waWxlTGlzdC5wdXNoKHRoaXMuaWQpO1xuXHRcdHRoaXMuc291cmNlID0gTW9kdWxlLl93cmFwKHNyYyk7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGZuID0gbmV3IEZ1bmN0aW9uKCdleHBvcnRzLCByZXF1aXJlLCBtb2R1bGUsIF9fZmlsZW5hbWUsIF9fZGlybmFtZSwgbHZHbG9iYWwsIEwnLCB0aGlzLnNvdXJjZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LWZ1bmNcblx0XHRcdGZuKHRoaXMuZXhwb3J0cywgTW9kdWxlLnJlcXVpcmUsIHRoaXMsIHRoaXMuZmlsZW5hbWUsIHRoaXMuX19kaXJuYW1lLCBnbG9iYWwkMSwgTCk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzLmVtaXQoJ3VuY2F1Z2h0RXhjZXB0aW9uJywgeyBtb2R1bGU6IHRoaXMuaWQsIGVycm9yOiBlcnIsIHNvdXJjZTogKCcnICsgdGhpcy5zb3VyY2UpLnNwbGl0KCdcXG4nKSB9KTtcblx0XHR9XG5cblx0XHRNb2R1bGUuX2NvbXBpbGVMaXN0LnBvcCgpO1xuXHRcdHRoaXMubG9hZGVkID0gdHJ1ZTtcblx0fTtcblxuXHQvKipcblx0ICogY2FjaGUgY3VycmVudCBtb2R1bGVcblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0TW9kdWxlLnByb3RvdHlwZS5jYWNoZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLnRpbWVzdGFtcCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cdFx0TW9kdWxlLl9jYWNoZVt0aGlzLmlkXSA9IHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIGxpdmV2aWV3IFRpdGFuaXVtIENvbW1vbkpTIHJlcXVpcmUgd2l0aCBzb21lIE5vZGUuanMgbG92ZSBhbmQgZGlydHkgaGFja3Ncblx0ICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMTcgQXBwY2VsZXJhdG9yXG5cdCAqL1xuXG5cdE9iamVjdC5zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAob2JqLCBwcm90bykge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b1xuXHRcdG9iai5fX3Byb3RvX18gPSBwcm90bztcblx0XHRyZXR1cm4gb2JqO1xuXHR9O1xuXG5cdE1vZHVsZS5wYXRjaChnbG9iYWwsICcxOTIuMTY4LjEuNjknLCAnODMyNCcpO1xuXG5cdC8vIFByZXZlbnQgZGlzcGxheSBmcm9tIHNsZWVwaW5nXG5cblx0VGl0YW5pdW0uQXBwLmlkbGVUaW1lckRpc2FibGVkID0gdHJ1ZTtcblxufSgpKTtcbiJdLCJzb3VyY2VSb290IjoiL3Zhci9mb2xkZXJzLzJiL3dxODNjZjdzN2h4Mzd2NGwxNmpqNDA3cjAwMDBnbi9UIn0=
